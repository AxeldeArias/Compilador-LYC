
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizadores;

import java_cup.runtime.*;
import java_cup.runtime.Symbol;
import java.util.LinkedList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class analisis_sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolos.class;
}

  /** Default constructor. */
  @Deprecated
  public analisis_sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public analisis_sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public analisis_sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\067\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\004\005\000\002\005\003\000\002\005\004" +
    "\000\002\006\005\000\002\007\003\000\002\007\003\000" +
    "\002\010\003\000\002\010\005\000\002\011\003\000\002" +
    "\011\004\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\012\003" +
    "\000\002\012\003\000\002\013\011\000\002\013\015\000" +
    "\002\014\012\000\002\015\011\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\017\005\000\002\017\005" +
    "\000\002\017\003\000\002\020\004\000\002\020\005\000" +
    "\002\021\005\000\002\022\005\000\002\023\003\000\002" +
    "\023\003\000\002\023\003\000\002\023\003\000\002\024" +
    "\003\000\002\024\005\000\002\024\005\000\002\024\003" +
    "\000\002\025\005\000\002\025\005\000\002\025\003\000" +
    "\002\026\005\000\002\026\003\000\002\026\003\000\002" +
    "\026\003\000\002\027\004\000\002\027\004\000\002\030" +
    "\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\145\000\004\010\005\001\002\000\004\002\000\001" +
    "\002\000\006\012\136\013\140\001\002\000\004\002\133" +
    "\001\002\000\022\004\016\005\031\006\027\014\010\015" +
    "\015\043\011\050\033\051\030\001\002\000\004\043\125" +
    "\001\002\000\014\004\041\005\031\006\027\015\052\043" +
    "\011\001\002\000\032\002\ufff0\004\ufff0\005\ufff0\006\ufff0" +
    "\014\ufff0\015\ufff0\023\054\024\055\042\ufff0\043\ufff0\050" +
    "\ufff0\051\ufff0\001\002\000\056\002\uffd5\004\uffd5\005\uffd5" +
    "\006\uffd5\014\uffd5\015\uffd5\017\uffd5\020\uffd5\023\uffd5\024" +
    "\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5" +
    "\042\uffd5\043\uffd5\044\uffd5\047\uffd5\050\uffd5\051\uffd5\001" +
    "\002\000\024\002\uffff\004\016\005\031\006\027\014\010" +
    "\015\015\043\011\050\033\051\030\001\002\000\004\043" +
    "\110\001\002\000\050\002\uffd0\004\uffd0\005\uffd0\006\uffd0" +
    "\014\uffd0\015\uffd0\022\050\023\uffd0\024\uffd0\025\uffd0\026" +
    "\uffd0\035\045\036\044\037\047\040\051\042\uffd0\043\uffd0" +
    "\050\uffd0\051\uffd0\001\002\000\026\002\ufff4\004\ufff4\005" +
    "\ufff4\006\ufff4\014\ufff4\015\ufff4\042\ufff4\043\ufff4\050\ufff4" +
    "\051\ufff4\001\002\000\026\002\ufff1\004\ufff1\005\ufff1\006" +
    "\ufff1\014\ufff1\015\ufff1\042\ufff1\043\ufff1\050\ufff1\051\ufff1" +
    "\001\002\000\026\002\ufff6\004\ufff6\005\ufff6\006\ufff6\014" +
    "\ufff6\015\ufff6\042\ufff6\043\ufff6\050\ufff6\051\ufff6\001\002" +
    "\000\062\002\uffd2\004\uffd2\005\uffd2\006\uffd2\014\uffd2\015" +
    "\uffd2\017\uffd2\020\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2" +
    "\027\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2\042" +
    "\uffd2\043\uffd2\044\uffd2\047\uffd2\050\uffd2\051\uffd2\001\002" +
    "\000\062\002\uffd8\004\uffd8\005\uffd8\006\uffd8\014\uffd8\015" +
    "\uffd8\017\uffd8\020\uffd8\023\uffd8\024\uffd8\025\037\026\040" +
    "\027\uffd8\030\uffd8\031\uffd8\032\uffd8\033\uffd8\034\uffd8\042" +
    "\uffd8\043\uffd8\044\uffd8\047\uffd8\050\uffd8\051\uffd8\001\002" +
    "\000\026\002\ufff2\004\ufff2\005\ufff2\006\ufff2\014\ufff2\015" +
    "\ufff2\042\ufff2\043\ufff2\050\ufff2\051\ufff2\001\002\000\026" +
    "\002\uffef\004\uffef\005\uffef\006\uffef\014\uffef\015\uffef\042" +
    "\uffef\043\uffef\050\uffef\051\uffef\001\002\000\026\002\uffee" +
    "\004\uffee\005\uffee\006\uffee\014\uffee\015\uffee\042\uffee\043" +
    "\uffee\050\uffee\051\uffee\001\002\000\062\002\uffce\004\uffce" +
    "\005\uffce\006\uffce\014\uffce\015\uffce\017\uffce\020\uffce\023" +
    "\uffce\024\uffce\025\uffce\026\uffce\027\uffce\030\uffce\031\uffce" +
    "\032\uffce\033\uffce\034\uffce\042\uffce\043\uffce\044\uffce\047" +
    "\uffce\050\uffce\051\uffce\001\002\000\006\004\035\007\036" +
    "\001\002\000\062\002\uffcf\004\uffcf\005\uffcf\006\uffcf\014" +
    "\uffcf\015\uffcf\017\uffcf\020\uffcf\023\uffcf\024\uffcf\025\uffcf" +
    "\026\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf\034" +
    "\uffcf\042\uffcf\043\uffcf\044\uffcf\047\uffcf\050\uffcf\051\uffcf" +
    "\001\002\000\026\002\ufff3\004\ufff3\005\ufff3\006\ufff3\014" +
    "\ufff3\015\ufff3\042\ufff3\043\ufff3\050\ufff3\051\ufff3\001\002" +
    "\000\004\004\034\001\002\000\026\002\uffcb\004\uffcb\005" +
    "\uffcb\006\uffcb\014\uffcb\015\uffcb\042\uffcb\043\uffcb\050\uffcb" +
    "\051\uffcb\001\002\000\026\002\uffcd\004\uffcd\005\uffcd\006" +
    "\uffcd\014\uffcd\015\uffcd\042\uffcd\043\uffcd\050\uffcd\051\uffcd" +
    "\001\002\000\026\002\uffcc\004\uffcc\005\uffcc\006\uffcc\014" +
    "\uffcc\015\uffcc\042\uffcc\043\uffcc\050\uffcc\051\uffcc\001\002" +
    "\000\012\004\041\005\031\006\027\043\011\001\002\000" +
    "\012\004\041\005\031\006\027\043\011\001\002\000\062" +
    "\002\uffd0\004\uffd0\005\uffd0\006\uffd0\014\uffd0\015\uffd0\017" +
    "\uffd0\020\uffd0\023\uffd0\024\uffd0\025\uffd0\026\uffd0\027\uffd0" +
    "\030\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0\042\uffd0\043" +
    "\uffd0\044\uffd0\047\uffd0\050\uffd0\051\uffd0\001\002\000\062" +
    "\002\uffd3\004\uffd3\005\uffd3\006\uffd3\014\uffd3\015\uffd3\017" +
    "\uffd3\020\uffd3\023\uffd3\024\uffd3\025\uffd3\026\uffd3\027\uffd3" +
    "\030\uffd3\031\uffd3\032\uffd3\033\uffd3\034\uffd3\042\uffd3\043" +
    "\uffd3\044\uffd3\047\uffd3\050\uffd3\051\uffd3\001\002\000\062" +
    "\002\uffd4\004\uffd4\005\uffd4\006\uffd4\014\uffd4\015\uffd4\017" +
    "\uffd4\020\uffd4\023\uffd4\024\uffd4\025\uffd4\026\uffd4\027\uffd4" +
    "\030\uffd4\031\uffd4\032\uffd4\033\uffd4\034\uffd4\042\uffd4\043" +
    "\uffd4\044\uffd4\047\uffd4\050\uffd4\051\uffd4\001\002\000\014" +
    "\004\uffdb\005\uffdb\006\uffdb\015\uffdb\043\uffdb\001\002\000" +
    "\014\004\uffdc\005\uffdc\006\uffdc\015\uffdc\043\uffdc\001\002" +
    "\000\014\004\041\005\031\006\027\015\052\043\011\001" +
    "\002\000\014\004\uffda\005\uffda\006\uffda\015\uffda\043\uffda" +
    "\001\002\000\014\004\041\005\031\006\027\015\052\043" +
    "\011\001\002\000\014\004\uffd9\005\uffd9\006\uffd9\015\uffd9" +
    "\043\uffd9\001\002\000\004\043\060\001\002\000\032\002" +
    "\uffde\004\uffde\005\uffde\006\uffde\014\uffde\015\uffde\023\054" +
    "\024\055\042\uffde\043\uffde\050\uffde\051\uffde\001\002\000" +
    "\012\004\041\005\031\006\027\043\011\001\002\000\012" +
    "\004\041\005\031\006\027\043\011\001\002\000\062\002" +
    "\uffd6\004\uffd6\005\uffd6\006\uffd6\014\uffd6\015\uffd6\017\uffd6" +
    "\020\uffd6\023\uffd6\024\uffd6\025\037\026\040\027\uffd6\030" +
    "\uffd6\031\uffd6\032\uffd6\033\uffd6\034\uffd6\042\uffd6\043\uffd6" +
    "\044\uffd6\047\uffd6\050\uffd6\051\uffd6\001\002\000\062\002" +
    "\uffd7\004\uffd7\005\uffd7\006\uffd7\014\uffd7\015\uffd7\017\uffd7" +
    "\020\uffd7\023\uffd7\024\uffd7\025\037\026\040\027\uffd7\030" +
    "\uffd7\031\uffd7\032\uffd7\033\uffd7\034\uffd7\042\uffd7\043\uffd7" +
    "\044\uffd7\047\uffd7\050\uffd7\051\uffd7\001\002\000\016\004" +
    "\041\005\031\006\027\015\052\021\063\043\011\001\002" +
    "\000\010\017\076\020\100\047\077\001\002\000\012\017" +
    "\uffe1\020\uffe1\044\uffe1\047\uffe1\001\002\000\016\004\041" +
    "\005\031\006\027\015\052\021\063\043\011\001\002\000" +
    "\022\023\054\024\055\027\065\030\066\031\067\032\070" +
    "\033\073\034\071\001\002\000\014\004\uffe5\005\uffe5\006" +
    "\uffe5\015\uffe5\043\uffe5\001\002\000\014\004\uffe4\005\uffe4" +
    "\006\uffe4\015\uffe4\043\uffe4\001\002\000\014\004\uffe9\005" +
    "\uffe9\006\uffe9\015\uffe9\043\uffe9\001\002\000\014\004\uffe8" +
    "\005\uffe8\006\uffe8\015\uffe8\043\uffe8\001\002\000\014\004" +
    "\uffe6\005\uffe6\006\uffe6\015\uffe6\043\uffe6\001\002\000\014" +
    "\004\041\005\031\006\027\015\052\043\011\001\002\000" +
    "\014\004\uffe7\005\uffe7\006\uffe7\015\uffe7\043\uffe7\001\002" +
    "\000\016\017\uffdf\020\uffdf\023\054\024\055\044\uffdf\047" +
    "\uffdf\001\002\000\012\017\uffe0\020\uffe0\044\uffe0\047\uffe0" +
    "\001\002\000\016\004\041\005\031\006\027\015\052\021" +
    "\063\043\011\001\002\000\014\004\041\005\031\006\027" +
    "\015\052\043\011\001\002\000\016\004\041\005\031\006" +
    "\027\015\052\021\063\043\011\001\002\000\012\017\uffe2" +
    "\020\uffe2\044\uffe2\047\uffe2\001\002\000\010\023\054\024" +
    "\055\047\103\001\002\000\014\004\041\005\031\006\027" +
    "\015\052\043\011\001\002\000\010\023\054\024\055\044" +
    "\105\001\002\000\056\002\uffeb\004\uffeb\005\uffeb\006\uffeb" +
    "\014\uffeb\015\uffeb\017\uffeb\020\uffeb\023\uffeb\024\uffeb\027" +
    "\uffeb\030\uffeb\031\uffeb\032\uffeb\033\uffeb\034\uffeb\042\uffeb" +
    "\043\uffeb\044\uffeb\047\uffeb\050\uffeb\051\uffeb\001\002\000" +
    "\012\017\uffe3\020\uffe3\044\uffe3\047\uffe3\001\002\000\032" +
    "\002\uffdd\004\uffdd\005\uffdd\006\uffdd\014\uffdd\015\uffdd\023" +
    "\054\024\055\042\uffdd\043\uffdd\050\uffdd\051\uffdd\001\002" +
    "\000\016\004\041\005\031\006\027\015\052\021\063\043" +
    "\011\001\002\000\012\017\076\020\100\044\112\047\077" +
    "\001\002\000\004\041\113\001\002\000\022\004\016\005" +
    "\031\006\027\014\010\015\015\043\011\050\033\051\030" +
    "\001\002\000\024\004\016\005\031\006\027\014\010\015" +
    "\015\042\115\043\011\050\033\051\030\001\002\000\030" +
    "\002\uffed\004\uffed\005\uffed\006\uffed\014\uffed\015\uffed\016" +
    "\117\042\uffed\043\uffed\050\uffed\051\uffed\001\002\000\026" +
    "\002\ufff5\004\ufff5\005\ufff5\006\ufff5\014\ufff5\015\ufff5\042" +
    "\ufff5\043\ufff5\050\ufff5\051\ufff5\001\002\000\004\041\120" +
    "\001\002\000\022\004\016\005\031\006\027\014\010\015" +
    "\015\043\011\050\033\051\030\001\002\000\024\004\016" +
    "\005\031\006\027\014\010\015\015\042\122\043\011\050" +
    "\033\051\030\001\002\000\026\002\uffec\004\uffec\005\uffec" +
    "\006\uffec\014\uffec\015\uffec\042\uffec\043\uffec\050\uffec\051" +
    "\uffec\001\002\000\010\023\054\024\055\044\124\001\002" +
    "\000\062\002\uffd1\004\uffd1\005\uffd1\006\uffd1\014\uffd1\015" +
    "\uffd1\017\uffd1\020\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1" +
    "\027\uffd1\030\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1\042" +
    "\uffd1\043\uffd1\044\uffd1\047\uffd1\050\uffd1\051\uffd1\001\002" +
    "\000\016\004\041\005\031\006\027\015\052\021\063\043" +
    "\011\001\002\000\010\017\076\020\100\044\127\001\002" +
    "\000\004\041\130\001\002\000\022\004\016\005\031\006" +
    "\027\014\010\015\015\043\011\050\033\051\030\001\002" +
    "\000\024\004\016\005\031\006\027\014\010\015\015\042" +
    "\132\043\011\050\033\051\030\001\002\000\026\002\uffea" +
    "\004\uffea\005\uffea\006\uffea\014\uffea\015\uffea\042\uffea\043" +
    "\uffea\050\uffea\051\uffea\001\002\000\004\002\001\001\002" +
    "\000\010\011\146\012\136\013\140\001\002\000\004\046" +
    "\141\001\002\000\004\046\ufffa\001\002\000\010\011\ufffd" +
    "\012\ufffd\013\ufffd\001\002\000\004\046\ufff9\001\002\000" +
    "\004\004\142\001\002\000\012\011\ufff8\012\ufff8\013\ufff8" +
    "\045\ufff8\001\002\000\012\011\ufffb\012\ufffb\013\ufffb\045" +
    "\144\001\002\000\004\004\145\001\002\000\012\011\ufff7" +
    "\012\ufff7\013\ufff7\045\ufff7\001\002\000\022\004\ufffe\005" +
    "\ufffe\006\ufffe\014\ufffe\015\ufffe\043\ufffe\050\ufffe\051\ufffe" +
    "\001\002\000\010\011\ufffc\012\ufffc\013\ufffc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\145\000\010\002\005\003\003\004\006\001\001\000" +
    "\002\001\001\000\010\005\133\006\136\007\134\001\001" +
    "\000\002\001\001\000\032\011\013\012\020\013\023\014" +
    "\012\015\017\021\016\022\031\024\011\025\022\026\021" +
    "\027\024\030\025\001\001\000\002\001\001\000\012\014" +
    "\012\024\122\025\022\026\021\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\012\115\013\023\014\012\015" +
    "\017\021\016\022\031\024\011\025\022\026\021\027\024" +
    "\030\025\001\001\000\002\001\001\000\004\023\045\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\026\042\001\001\000\004\026\041\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\014\012\024\106\025" +
    "\022\026\021\001\001\000\002\001\001\000\012\014\012" +
    "\024\052\025\022\026\021\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\025\056\026\021" +
    "\001\001\000\006\025\055\026\021\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\014\012\017\060\020\061" +
    "\024\063\025\022\026\021\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\014\012\020\074\024\063\025\022" +
    "\026\021\001\001\000\004\016\071\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\014\012\024\073\025\022\026" +
    "\021\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\014\012\020\105\024\063\025\022\026" +
    "\021\001\001\000\012\014\012\024\101\025\022\026\021" +
    "\001\001\000\014\014\012\020\100\024\063\025\022\026" +
    "\021\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\014\012\024\103\025\022\026\021\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\014\012\017\110\020\061\024\063\025\022\026" +
    "\021\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\011\113\012\020\013\023\014\012\015\017\021\016\022" +
    "\031\024\011\025\022\026\021\027\024\030\025\001\001" +
    "\000\030\012\115\013\023\014\012\015\017\021\016\022" +
    "\031\024\011\025\022\026\021\027\024\030\025\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\011\120\012\020\013\023\014\012\015\017\021\016" +
    "\022\031\024\011\025\022\026\021\027\024\030\025\001" +
    "\001\000\030\012\115\013\023\014\012\015\017\021\016" +
    "\022\031\024\011\025\022\026\021\027\024\030\025\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\014\012\017\125\020\061\024\063\025\022\026" +
    "\021\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\011\130\012\020\013\023\014\012\015\017\021\016\022" +
    "\031\024\011\025\022\026\021\027\024\030\025\001\001" +
    "\000\030\012\115\013\023\014\012\015\017\021\016\022" +
    "\031\024\011\025\022\026\021\027\024\030\025\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\006\146\007" +
    "\134\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\142\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$analisis_sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$analisis_sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$analisis_sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$analisis_sintactico$actions {



  private final analisis_sintactico parser;

  /** Constructor */
  CUP$analisis_sintactico$actions(analisis_sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$analisis_sintactico$do_action_part00000000(
    int                        CUP$analisis_sintactico$act_num,
    java_cup.runtime.lr_parser CUP$analisis_sintactico$parser,
    java.util.Stack            CUP$analisis_sintactico$stack,
    int                        CUP$analisis_sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$analisis_sintactico$result;

      /* select the action based on the action number */
      switch (CUP$analisis_sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)).value;
		RESULT = start_val;
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$analisis_sintactico$parser.done_parsing();
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= programa 
            {
              Object RESULT =null;
		/* recorrerLista(&listaSimbolos); guardarTabla(&listaSimbolos); */System.out.println("Regla Compilacion OK");
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= seccion_declaraciones bloque 
            {
              Object RESULT =null;
		 System.out.println("Regla PROGRAMA");
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("programa",1, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // seccion_declaraciones ::= DEFVAR bloque_declaraciones ENDDEF 
            {
              Object RESULT =null;
		 System.out.println("Regla SECCION DECLARACION");
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("seccion_declaraciones",2, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // bloque_declaraciones ::= declaracion 
            {
              Object RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("bloque_declaraciones",3, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // bloque_declaraciones ::= bloque_declaraciones declaracion 
            {
              Object RESULT =null;
		 System.out.println("Regla BLOQUE DECLARACION");
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("bloque_declaraciones",3, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaracion ::= tipo_dato DOS_PUNTOS lista_ids 
            {
              Object RESULT =null;
		 System.out.println("Regla DECLARACION");
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("declaracion",4, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // tipo_dato ::= TIPO_INTEGER 
            {
              Object RESULT =null;
		 /*tipoId = T_INTEGER;*/ System.out.println("Regla TIPO DECLARACION");
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("tipo_dato",5, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // tipo_dato ::= TIPO_FLOAT 
            {
              Object RESULT =null;
		/* tipoId = T_FLOAT;*/ System.out.println("Regla TIPO DECLARACION");
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("tipo_dato",5, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // lista_ids ::= ID 
            {
              Object RESULT =null;
		 /*agregarVarATabla(&listaSimbolos, yylval.str_val, NULL, tipoId, (int) NULL);*/ System.out.println("Regla LISTA IDS");
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("lista_ids",6, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // lista_ids ::= lista_ids PUNTO_COMA ID 
            {
              Object RESULT =null;
		 /*agregarVarATabla(&listaSimbolos, yylval.str_val, NULL, tipoId, (int) NULL);*/ System.out.println("Regla LISTA IDS");
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("lista_ids",6, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // bloque ::= sentencia 
            {
              Object RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("bloque",7, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // bloque ::= bloque sentencia 
            {
              Object RESULT =null;
		 System.out.println("Regla BLOQUE");
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("bloque",7, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sentencia ::= asignacion 
            {
              Object RESULT =null;
		 System.out.println("Regla SENTENCIA");
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("sentencia",8, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // sentencia ::= asignacion_especial 
            {
              Object RESULT =null;
		 System.out.println("Regla SENTENCIA");
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("sentencia",8, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // sentencia ::= bloque_if 
            {
              Object RESULT =null;
		 System.out.println("Regla SENTENCIA");
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("sentencia",8, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // sentencia ::= bloque_while 
            {
              Object RESULT =null;
		 System.out.println("Regla SENTENCIA");
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("sentencia",8, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // sentencia ::= expresion 
            {
              Object RESULT =null;
		 System.out.println("Regla SENTENCIA");
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("sentencia",8, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // sentencia ::= escritura 
            {
              Object RESULT =null;
		 System.out.println("Regla SENTENCIA");
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("sentencia",8, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // sentencia ::= lectura 
            {
              Object RESULT =null;
		 System.out.println("Regla SENTENCIA");
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("sentencia",8, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // bloque_if ::= IF P_A expresion_logica P_C LL_A bloque LL_C 
            {
              Object RESULT =null;
		 System.out.println("Regla BLOQUE_IF");
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("bloque_if",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // bloque_if ::= IF P_A expresion_logica P_C LL_A bloque LL_C ELSE LL_A bloque LL_C 
            {
              Object RESULT =null;
		 System.out.println("Regla BLOQUE IF ELSE");
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("bloque_if",9, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-10)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // bloque_if_unario ::= IF P_A expresion_logica COMA expresion COMA expresion P_C 
            {
              Object RESULT =null;
		 System.out.println("Regla BLOQUE IF UNARIO");
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("bloque_if_unario",10, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // bloque_while ::= WHILE P_A expresion_logica P_C LL_A bloque LL_C 
            {
              Object RESULT =null;
		 System.out.println("Regla BLOQUE_WHILE");
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("bloque_while",11, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // op_booleano ::= OP_MENOR 
            {
              Object RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("op_booleano",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // op_booleano ::= OP_MENOR_IGUAL 
            {
              Object RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("op_booleano",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // op_booleano ::= OP_MAYOR 
            {
              Object RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("op_booleano",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // op_booleano ::= OP_MAYOR_IGUAL 
            {
              Object RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("op_booleano",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // op_booleano ::= OP_IGUAL 
            {
              Object RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("op_booleano",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // op_booleano ::= OP_DISTINTO 
            {
              Object RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("op_booleano",12, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expresion_logica ::= expresion_logica OP_AND termino_logico 
            {
              Object RESULT =null;
		 System.out.println("Regla EXPRESION_LOGICA");
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("expresion_logica",13, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expresion_logica ::= expresion_logica OP_OR termino_logico 
            {
              Object RESULT =null;
		 System.out.println("Regla EXPRESION_LOGICA");
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("expresion_logica",13, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expresion_logica ::= termino_logico 
            {
              Object RESULT =null;
		 System.out.println("Regla EXPRESION_LOGICA");
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("expresion_logica",13, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // termino_logico ::= OP_NOT termino_logico 
            {
              Object RESULT =null;
		 System.out.println("Regla TERMINO LOGICO");
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("termino_logico",14, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // termino_logico ::= expresion op_booleano expresion 
            {
              Object RESULT =null;
		 System.out.println("Regla TERMINO LOGICO");
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("termino_logico",14, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // asignacion ::= ID OP_ASIG expresion 
            {
              Object RESULT =null;
		 /*chequearVarEnTabla(&listaSimbolos, $1);*/ System.out.println("Regla ASIGNACION");
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("asignacion",15, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // asignacion_especial ::= ID operadores_especiales expresion 
            {
              Object RESULT =null;
		 /*chequearVarEnTabla(&listaSimbolos, $1); */
															System.out.println("Regla ASIGNACION ESPECIA"); 
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("asignacion_especial",16, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // operadores_especiales ::= OP_ASIG_SUM 
            {
              Object RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("operadores_especiales",17, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // operadores_especiales ::= OP_ASIG_RES 
            {
              Object RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("operadores_especiales",17, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // operadores_especiales ::= OP_ASIG_MUL 
            {
              Object RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("operadores_especiales",17, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // operadores_especiales ::= OP_ASIG_DIV 
            {
              Object RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("operadores_especiales",17, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expresion ::= termino 
            {
              Object RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("expresion",18, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expresion ::= expresion OP_SUMA termino 
            {
              Object RESULT =null;
		 System.out.println("Regla EXPRESION ARITMETICA");
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("expresion",18, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expresion ::= expresion OP_RESTA termino 
            {
              Object RESULT =null;
		 System.out.println("Regla EXPRESION ARITMETICA");
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("expresion",18, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expresion ::= bloque_if_unario 
            {
              Object RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("expresion",18, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // termino ::= termino OP_MUL factor 
            {
              Object RESULT =null;
		 System.out.println("Regla TERMINO");
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("termino",19, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // termino ::= termino OP_DIV factor 
            {
              Object RESULT =null;
		 System.out.println("Regla TERMINO");
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("termino",19, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // termino ::= factor 
            {
              Object RESULT =null;

              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("termino",19, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // factor ::= P_A expresion P_C 
            {
              Object RESULT =null;
		 System.out.println("Regla FACTOR");
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("factor",20, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // factor ::= ID 
            {
              Object RESULT =null;
		/* chequearVarEnTabla(&listaSimbolos, $1);*/
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("factor",20, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // factor ::= CONST_INT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 System.out.println(a); /*agregarVarATabla(&listaSimbolos, NULL, valor, (int) NULL, (int) NULL);*/
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("factor",20, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // factor ::= CONST_FLOAT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$analisis_sintactico$stack.peek()).value;
		 System.out.println(a);/* agregarVarATabla(&listaSimbolos, NULL, valor, (int) NULL, (int) NULL );*/
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("factor",20, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // escritura ::= DISPLAY ID 
            {
              Object RESULT =null;
		 System.out.println("Regla ESCRITURA");
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("escritura",21, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // escritura ::= DISPLAY CONST_STR 
            {
              Object RESULT =null;
		 /*lengString = (strlen(yylval.str_val)-2); agregarVarATabla(&listaSimbolos, NULL, yylval.str_val, (int) NULL, lengString); System.out.println("Regla EXPRESION CADENA");*/
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("escritura",21, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // lectura ::= GET ID 
            {
              Object RESULT =null;
		 System.out.println("Regla LECTURA");
              CUP$analisis_sintactico$result = parser.getSymbolFactory().newSymbol("lectura",22, ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.elementAt(CUP$analisis_sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$analisis_sintactico$stack.peek()), RESULT);
            }
          return CUP$analisis_sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$analisis_sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$analisis_sintactico$do_action(
    int                        CUP$analisis_sintactico$act_num,
    java_cup.runtime.lr_parser CUP$analisis_sintactico$parser,
    java.util.Stack            CUP$analisis_sintactico$stack,
    int                        CUP$analisis_sintactico$top)
    throws java.lang.Exception
    {
              return CUP$analisis_sintactico$do_action_part00000000(
                               CUP$analisis_sintactico$act_num,
                               CUP$analisis_sintactico$parser,
                               CUP$analisis_sintactico$stack,
                               CUP$analisis_sintactico$top);
    }
}

}
