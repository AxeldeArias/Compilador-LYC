/*1ra Area: Código de Usuario*/
//---->Importaciones, paquetes
package Analizadores;
import java_cup.runtime.*;
import java_cup.runtime.Symbol;
import java.util.LinkedList;
import Tabla.*;
import Arbol.*;
import java.util.HashMap;
import java.util.Stack;
import java.util.Map;


// ---------> Codigo para las acciones gramaticales
action code
{:
    Stack<Nodo> pilaExpresionFactor = new Stack<Nodo>();
    Stack<Nodo> pilaMantenerEstadoPorNivel = new Stack<Nodo>();
    Map<Integer, Nodo> listaBloquesPorNivel = new HashMap<Integer, Nodo>();
    Integer nivel = 0;
    Boolean notActivado = false;


    public TablaDeSimbolos tablaDeSimbolos = new TablaDeSimbolos();
    public Graficador graficador = new Graficador();
    public String primerIDAsignacion = null;
    public TipoDato tipoId;
    public Nodo nodoMult, nodoLista, nodoInicio, nodoPrograma, nodoBloque, nodoSentencia,
               nodoAsignacion, nodoAsignacionEspecial, nodoExpresionLogica, nodoTerminoLogico,
               nodoExpresion, nodoTermino, nodoFactor, nodoTerminoLogicoIzq,
               nodoIf, nodoIfUnario, nodoElse, nodoCuerpoIf,
               nodoWhile,
               nodoDisplay, nodoGet,
               nodoExpresionAsignacion, nodoValorAux, nodoStart;
:}


parser code
{:

    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        System.out.println("!!!!!!! Error Sintactico !!!!!!! ");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+(fila+1));
        System.out.println("\t\tColumna: "+(columna+1));



    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        System.out.println("!!!!!!! Error Sintactico !!!!!!! ");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+(fila+1));
        System.out.println("\t\tColumna: "+(columna+1));


    }
:}

/*2da Area: Código de Usuario*/
//----------> declaracion de terminales


terminal String ID;
terminal String CONST_INT;
terminal String CONST_FLOAT;


terminal OP_ASIG;
terminal OP_SUMA;
terminal OP_MUL;
                              

//----------> declaracion de no terminales
non terminal Symbol s, mult,
             factor, expresion, termino, lista ;



start with s;


s   ::=  mult  {:
                    nodoStart = nodoMult;
                    System.out.println("Regla Compilacion OK");
                    nodoStart.recorrer();
                    graficador.graficarArbol(nodoStart);
                :};
mult ::= lista expresion {: nodoMult = nodoLista;nodoValorAux.setDer(nodoExpresion); :};

lista ::= lista ID:_id OP_ASIG {: nodoLista = new Nodo(";",nodoLista,new Nodo(":=",new Hoja(_id),new Hoja(primerIDAsignacion)));:};

lista ::= ID:_id OP_ASIG {:
            primerIDAsignacion = _id;
            nodoLista = new Nodo(":=", new Hoja(primerIDAsignacion));
            nodoValorAux = nodoLista;
          :};

expresion	::= termino {: nodoExpresion = nodoTermino; :}
			| expresion OP_SUMA termino {: nodoExpresion = new Nodo("-",nodoExpresion, nodoTermino); :}
			;

		
termino	::= termino OP_MUL factor {: nodoTermino = new Nodo("*",nodoTermino, nodoFactor); :}
		| factor {: nodoTermino = nodoFactor; :}
		;
			
factor	::= ID:_id {:
                nodoFactor = new Hoja(_id);
            :}
		| CONST_INT:_intVal {:
                nodoFactor = new Hoja(_intVal);
		    :}
		| CONST_FLOAT:_floatVal {:
		        nodoFactor = new Hoja(_floatVal);
            :}
		;
