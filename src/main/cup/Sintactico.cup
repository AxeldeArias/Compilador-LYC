/*1ra Area: Código de Usuario*/
//---->Importaciones, paquetes
package Analizadores;
import java_cup.runtime.*;
import java_cup.runtime.Symbol;
import java.util.LinkedList;
import Tabla.*;
import Arbol.*;
import java.util.HashMap;
import java.util.Stack;
import java.util.Map;


// ---------> Codigo para las acciones gramaticales
action code
{:
    Stack<Nodo> pilaExpresionFactor = new Stack<Nodo>();
    Stack<Nodo> pilaMantenerEstadoPorNivel = new Stack<Nodo>();
    Map<Integer, Nodo> listaBloquesPorNivel = new HashMap<Integer, Nodo>();
    Integer nivel = 0;

    public TablaDeSimbolos tablaDeSimbolos = new TablaDeSimbolos();
    public TipoDato tipoId;
    public Nodo nodoInicio, nodoPrograma, nodoBloque, nodoSentencia, 
               nodoAsignacion, nodoAsignacionEspecial, nodoExpresionLogica, nodoTerminoLogico,
               nodoExpresion, nodoTermino, nodoFactor, nodoTerminoLogicoIzq,
               nodoIf, nodoElse, nodoCuerpoIf,
               nodoWhile,
               nodoDisplay, nodoGet;
:}


parser code
{:

    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        System.out.println("!!!!!!! Error Sintactico !!!!!!! ");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);



    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        System.out.println("!!!!!!! Error Sintactico !!!!!!! ");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);


    }
:}

/*2da Area: Código de Usuario*/
//----------> declaracion de terminales


terminal String ID;
terminal String CONST_INT;
terminal String CONST_FLOAT;
terminal String CONST_STR;

terminal DEFVAR, ENDDEF;
terminal TIPO_INTEGER, TIPO_FLOAT;

terminal WHILE;
terminal IF, ELSE;
terminal OP_AND, OP_OR, OP_NOT;

terminal OP_ASIG;
terminal OP_SUMA, OP_RESTA;
terminal OP_MUL, OP_DIV;
terminal String OP_IGUAL, OP_DISTINTO;
terminal String OP_MENOR, OP_MENOR_IGUAL, OP_MAYOR, OP_MAYOR_IGUAL;
terminal String OP_ASIG_SUM, OP_ASIG_RES, OP_ASIG_MUL, OP_ASIG_DIV;
terminal LL_A, LL_C, P_A, P_C;
terminal PUNTO_COMA;
terminal DOS_PUNTOS;
terminal COMA;
terminal GET;
terminal DISPLAY;
                              

//----------> declaracion de no terminales
non terminal Symbol inicio, programa, vacio,
             seccion_declaraciones, bloque_declaraciones, declaracion,
             tipo_dato, lista_ids, bloque, sentencia, sentencia_if, sentencia_if_unario ,
             sentencia_if_parte_else, sentencia_while, expresion_logica,
             termino_logico, asignacion , asignacion_especial,
             factor, escritura, lectura, expresion, termino ;
non terminal String operadores_especiales, op_booleano;



start with inicio;


inicio   ::= programa {:
                    nodoInicio = nodoPrograma;
                    //tablaDeSimbolos.recorrerTabla();
                    tablaDeSimbolos.guardarTabla();
                    System.out.println("Regla Compilacion OK");
                    if(nodoPrograma != null) nodoPrograma.recorrer();
                :};

programa	::= seccion_declaraciones  bloque {: nodoPrograma = listaBloquesPorNivel.get(nivel); :};

seccion_declaraciones 	::= DEFVAR bloque_declaraciones ENDDEF {: :};

bloque_declaraciones	::= declaracion
						| bloque_declaraciones declaracion  {: :}
						;

declaracion ::= tipo_dato DOS_PUNTOS lista_ids  {: :}
			;

tipo_dato 	::= TIPO_INTEGER {: tipoId = TipoDato.T_INTEGER; :}
			| TIPO_FLOAT {: tipoId = TipoDato.T_FLOAT; :}
			;

lista_ids	::= ID:_id {: tablaDeSimbolos.agregarEnTabla(_id, null, tipoId, null); :}
			| lista_ids PUNTO_COMA ID:_id {: tablaDeSimbolos.agregarEnTabla(_id, null, tipoId, null); :}
			;

bloque  ::= sentencia  {: listaBloquesPorNivel.put(nivel, nodoSentencia); :}
		    | bloque sentencia {:
		            listaBloquesPorNivel.put(nivel, new Nodo(";;", listaBloquesPorNivel.get(nivel), nodoSentencia));
                :}
		    ;

sentencia ::= asignacion {: nodoSentencia = nodoAsignacion; :}
			| asignacion_especial {: nodoSentencia = nodoAsignacionEspecial; :}
			| sentencia_if {: nodoSentencia = nodoIf; nivel--; :}
			| sentencia_while {: nodoSentencia = nodoWhile; :}
			| escritura {: nodoSentencia = nodoDisplay; :}
			| lectura {: nodoSentencia = nodoGet; :}
			;

sentencia_if ::= IF P_A expresion_logica {:
                    nivel++;
                    /* Apilamos la expresion lógica por si hay otra en el proximo bloque.
                     De esta manera no perdemos la referencia */
                    pilaMantenerEstadoPorNivel.push(nodoExpresionLogica);
                    RESULT = new Symbol(-1);
                :} P_C LL_A bloque {:
                    /*Apilamos por si hay un else*/
                    pilaMantenerEstadoPorNivel.push(listaBloquesPorNivel.get(nivel));
                    RESULT = new Symbol(-1);
                :} LL_C sentencia_if_parte_else
                ;

sentencia_if_parte_else ::= ELSE LL_A bloque LL_C {:
                                /*Caso IF Con Else*/
                                Nodo nodoCuerpoIf = new Nodo ("CUERPO",
                                    pilaMantenerEstadoPorNivel.pop(),           // TRUE
                                    listaBloquesPorNivel.get(nivel)             // FALSE
                                );
                                Nodo nodoCondicion = pilaMantenerEstadoPorNivel.pop();
                                nodoIf = new Nodo("IF", nodoCondicion, nodoCuerpoIf );
                                RESULT = new Symbol(-1);
                            :}
                            | vacio {:
                                /*Caso IF Sin Else*/
                                Nodo _nodoBloque = pilaMantenerEstadoPorNivel.pop();
                                Nodo _nodoCondicion = pilaMantenerEstadoPorNivel.pop();
                                nodoIf = new Nodo("IF", _nodoCondicion, _nodoBloque);
                                RESULT = new Symbol(-1);
                            :}
                            ;
vacio ::= {: RESULT = new Symbol(-1); :};


sentencia_if_unario	::= IF P_A expresion_logica COMA expresion COMA expresion P_C
                    ;

sentencia_while    ::= WHILE P_A expresion_logica {:
                                    nivel++;
                                    pilaMantenerEstadoPorNivel.push(nodoExpresionLogica);
                                    RESULT = new Symbol(-1);
                                  :} P_C LL_A bloque LL_C {:
                                                Nodo _nodoBloque = listaBloquesPorNivel.get(nivel);
                                                Nodo _nodoCondicion = pilaMantenerEstadoPorNivel.pop();
                                                nodoWhile = new Nodo("WHILE", _nodoCondicion, _nodoBloque);;
                                                nivel--;
                                                RESULT = new Symbol(-1);
                                            :}
				    ;

op_booleano 	::=  OP_MENOR: _opB {:RESULT=_opB; :}
				| OP_MENOR_IGUAL: _opB {:RESULT=_opB; :}
				| OP_MAYOR: _opB {:RESULT=_opB; :}
				| OP_MAYOR_IGUAL: _opB {:RESULT=_opB; :}
				| OP_IGUAL: _opB {: RESULT=_opB; :}
				| OP_DISTINTO: _opB {:RESULT=_opB; :}
				;

expresion_logica	::= termino_logico {:
                            nodoTerminoLogicoIzq = nodoTerminoLogico;
                            RESULT = new Symbol(-1);
                        :} OP_AND termino_logico {:
                            nodoExpresionLogica = new Nodo("AND", nodoTerminoLogicoIzq, nodoTerminoLogico);
                        :}
					| termino_logico {:
                            nodoTerminoLogicoIzq = nodoTerminoLogico;
                            RESULT = new Symbol(-1);
                        :} OP_OR termino_logico {:
                            nodoExpresionLogica = new Nodo("OR", nodoTerminoLogicoIzq, nodoTerminoLogico);
                        :}
					| termino_logico {: nodoExpresionLogica = nodoTerminoLogico; :}
					|  OP_NOT termino_logico {: nodoExpresionLogica = new Nodo("NOT", nodoTerminoLogico); :}
					;

termino_logico	::= expresion {:
                        pilaMantenerEstadoPorNivel.push(nodoExpresion);
                        RESULT = new Symbol(-1);
                    :} op_booleano: _operadorB expresion {:
                        Nodo nodoExpresionIzq = pilaMantenerEstadoPorNivel.pop();
                        nodoTerminoLogico = new Nodo(_operadorB, nodoExpresionIzq,  nodoExpresion);
                    :}
                    ;
	

asignacion 	::= ID:_id OP_ASIG expresion {:
					                tablaDeSimbolos.chequearEnTabla(_id);
                                    nodoAsignacion = new Nodo(":=", new Hoja(_id), nodoExpresion);
                                :}
			;

asignacion_especial ::= ID:_id operadores_especiales:_operador expresion  {: 
						    tablaDeSimbolos.chequearEnTabla(_id);
						    nodoAsignacionEspecial = new Nodo(_operador, new Hoja(_id), nodoExpresion);
					    :}
					;
															
operadores_especiales   ::= OP_ASIG_SUM:_op {: RESULT=_op; :}
                        | OP_ASIG_RES:_op {: RESULT=_op; :}
                        | OP_ASIG_MUL:_op {: RESULT=_op; :}
                        | OP_ASIG_DIV:_op {: RESULT=_op; :}
						;

		
expresion	::= termino {: nodoExpresion = nodoTermino; :}
			| expresion OP_SUMA termino {: nodoExpresion = new Nodo("+",nodoExpresion, nodoTermino); :}
			| expresion OP_RESTA termino {: nodoExpresion = new Nodo("-",nodoExpresion, nodoTermino); :}
			| sentencia_if_unario
			;

		
termino	::= termino OP_MUL factor {: nodoTermino = new Nodo("*",nodoTermino, nodoFactor); :}
		| termino OP_DIV factor  {: nodoTermino = new Nodo("/",nodoTermino, nodoFactor); :}
		| factor {: nodoTermino = nodoFactor; :}
		;
			
factor	::= P_A {:
                pilaExpresionFactor.push(nodoExpresion);
                pilaExpresionFactor.push(nodoTermino);
                RESULT = new Symbol(-1);
            :} expresion  P_C {:
                nodoFactor = nodoExpresion;
                nodoTermino = pilaExpresionFactor.pop();
                nodoExpresion= pilaExpresionFactor.pop();
                RESULT = new Symbol(-1);
            :}
		;

factor	::= ID:_id {:
                tablaDeSimbolos.chequearEnTabla(_id);
                nodoFactor = new Hoja(_id);
            :}
		| CONST_INT:_intVal {:
                tablaDeSimbolos.agregarEnTabla(null, _intVal, null, null);
                nodoFactor = new Hoja(_intVal);
		    :}
		| CONST_FLOAT:_floatVal {:
		        tablaDeSimbolos.agregarEnTabla(null, _floatVal, null, null);
		        nodoFactor = new Hoja(_floatVal);
            :}
		;

escritura	::= DISPLAY ID:_id {:
                        tablaDeSimbolos.chequearEnTabla(_id);
                        nodoDisplay = new Nodo("DISPLAY", new Hoja(_id));
                    :}
			| DISPLAY CONST_STR:_strVal {:
			    tablaDeSimbolos.agregarEnTabla(null, _strVal, null, _strVal.length());
			    nodoDisplay = new Nodo("DISPLAY", new Hoja(_strVal));
            :}
			;

lectura	::= GET ID:_id {:
                tablaDeSimbolos.chequearEnTabla(_id);
                nodoGet = new Nodo("GET", new Hoja(_id));
            :}
		;
