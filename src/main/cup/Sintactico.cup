/*1ra Area: Código de Usuario*/
//---->Importaciones, paquetes
package Analizadores;
import java_cup.runtime.*;
import java_cup.runtime.Symbol;
import java.util.LinkedList;
import Tabla.*;
import Arbol.*;
import java.util.HashMap;
import java.util.Stack;
import java.util.Map;


// ---------> Codigo para las acciones gramaticales
action code
{:
    Integer cantidadDeOperacionARealizar = 0, identificadorTake = 0;
    public ListaTercetos listaTercetos = new ListaTercetos();
    public TablaDeSimbolos tablaDeSimbolos = new TablaDeSimbolos();
    public TipoDato tipoId;
    Integer indexLista = 0, indexSentenciaTake = 0, indexInicioTake = 0,
            indexCant = 0, indexSaltoAlFinDelTake = 0, indexFinTake = 0,
            indexDecrementaCant = 0;
    Integer indexFactor= null, indexTermino=null,indexExpresion=null;

:}


parser code
{:

    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        System.out.println("!!!!!!! Error Sintactico !!!!!!! ");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+(fila+1));
        System.out.println("\t\tColumna: "+(columna+1));
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        System.out.println("!!!!!!! Error Sintactico !!!!!!! ");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+(fila+1));
        System.out.println("\t\tColumna: "+(columna+1));
    }

    public void semantic_error(String error){
        System.out.println("!!!!!!! Error Semántico !!!!!!! ");
        System.out.println(error);
        System.exit(1);
    }
:}

/*2da Area: Código de Usuario*/
//----------> declaracion de terminales

terminal String id, cte_s, cte;
terminal Symbol pa, pc, ca, cc,
                pyc, take, mas, coma,
                read, write, asigna;


//----------> declaracion de no terminales
non terminal Symbol S,
                     PROGRAMA, TAKE ,
                     READ, WRITE, LISTA, SENTENCIA, ASIG;



start with S;

S ::= PROGRAMA {:
        tablaDeSimbolos.guardarTabla();
        listaTercetos.show();
    :};

PROGRAMA ::= SENTENCIA;

PROGRAMA ::= PROGRAMA SENTENCIA{:System.out.println("cant");:}  ;

SENTENCIA ::= READ {:System.out.println("finread");:} | ASIG | WRITE ;

ASIG ::= id:_id asigna TAKE {:
                tablaDeSimbolos.agregarEnTabla(_id, TipoDato.T_STRING, null, _id.length()-2);
                listaTercetos.add(new Terceto("=", _id, indexExpresion ));
        :} ;

READ ::= read id:_id {:
                tablaDeSimbolos.agregarEnTabla(_id, TipoDato.T_STRING, null, null);
                listaTercetos.add(new Terceto("READ", _id ));
        :};

TAKE ::= take pa mas pyc id:_idCant {:
                Integer numeroTake = identificadorTake ++;
                String auxCant = "@auxCant" + numeroTake;
                tablaDeSimbolos.agregarEnTabla(auxCant, TipoDato.T_INTEGER, null, null);
                indexCant = listaTercetos.add(new Terceto("=", auxCant , _idCant ));
                indexInicioTake = listaTercetos.add(new Terceto("ETIQ"));
                listaTercetos.add(new Terceto("CMP" , indexCant,  "0" ));
                indexSaltoAlFinDelTake = listaTercetos.add(new Terceto("JA"));
                indexDecrementaCant = listaTercetos.add(new Terceto("-" , auxCant,  "1" ));
                listaTercetos.add(new Terceto("=" , auxCant,  indexDecrementaCant ));
                RESULT = new Symbol(-1);

            :} pyc ca LISTA {:
                listaTercetos.add(new Terceto("JMP", indexInicioTake ));
                indexFinTake = listaTercetos.add(new Terceto("ETIQ"));
                listaTercetos.reemplazarSalto(indexSaltoAlFinDelTake, indexFinTake);
                RESULT = new Symbol(-1);

            :} cc pc {: indexSentenciaTake = indexLista; :};


LISTA ::= cte:_intVal {:
                String constanteCreada = tablaDeSimbolos.agregarEnTabla(Integer.valueOf(_intVal), TipoDato.T_INTEGER, null, null);
                indexLista = listaTercetos.add(new Terceto(constanteCreada));
        :};

LISTA ::= LISTA coma cte:_intVal {:
                String constanteCreada = tablaDeSimbolos.agregarEnTabla(Integer.valueOf(_intVal), TipoDato.T_INTEGER, _intVal, null);
                indexLista = listaTercetos.add(new Terceto("+", constanteCreada , indexLista ));
        :};

WRITE ::= write cte_s:_strVal {:
            tablaDeSimbolos.agregarEnTabla(_strVal, TipoDato.T_STRING, null, _strVal.length()-2);
            listaTercetos.add(new Terceto("WRITE", _strVal ));
        :};

WRITE ::= write id:_id {:
            if(!tablaDeSimbolos.chequearEnTabla(_id)){
                semantic_error("La variable " + _id + " no fué definida");
            }
            listaTercetos.add(new Terceto("WRITE", _id ));
        :};
