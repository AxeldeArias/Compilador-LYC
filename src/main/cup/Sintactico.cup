/*1ra Area: Código de Usuario*/
//---->Importaciones, paquetes
package Analizadores;
import java_cup.runtime.*;
import java_cup.runtime.Symbol;
import java.util.LinkedList;
//-------> Codigo para el parser, variables, metodos

// ---------> Codigo para las acciones gramaticales
action code
{:
:}


/*2da Area: Código de Usuario*/
//----------> declaracion de terminales


terminal ID;
terminal CONST_INT;
terminal CONST_FLOAT;
terminal CONST_STR;

terminal DEFVAR, ENDDEF;
terminal TIPO_INTEGER, TIPO_FLOAT;

terminal WHILE;
terminal IF, ELSE;
terminal OP_AND, OP_OR, OP_NOT;

terminal OP_ASIG;
terminal OP_SUMA, OP_RESTA;
terminal OP_MUL, OP_DIV;
terminal OP_IGUAL, OP_DISTINTO;
terminal OP_MENOR, OP_MENOR_IGUAL, OP_MAYOR, OP_MAYOR_IGUAL;
terminal OP_ASIG_SUM, OP_ASIG_RES, OP_ASIG_MUL, OP_ASIG_DIV;
terminal LL_A, LL_C, P_A, P_C;
terminal PUNTO_COMA;
terminal DOS_PUNTOS;
terminal COMA;
terminal GET;
terminal DISPLAY;
                              

//----------> declaracion de no terminales
non terminal inicio, programa;
non terminal seccion_declaraciones, bloque_declaraciones, declaracion;
non terminal tipo_dato, lista_ids, bloque, sentencia, bloque_if, bloque_if_unario ;
non terminal bloque_while, op_booleano, expresion_logica, termino_logico, asignacion ;
non terminal asignacion_especial, operadores_especiales, expresion, termino;
non terminal factor, escritura, lectura ;

//----------> precedencia de menor a mayor
// precedence left OP_SUMA, OP_RESTA;
// precedence left OP_MUL, OP_DIV;

start with inicio;




inicio   ::= programa {:/* recorrerLista(&listaSimbolos); guardarTabla(&listaSimbolos); */System.out.println("Regla Compilacion OK");:};

programa	::= seccion_declaraciones bloque {: System.out.println("Regla PROGRAMA");:};

seccion_declaraciones 	::= DEFVAR bloque_declaraciones ENDDEF {: System.out.println("Regla SECCION DECLARACION");:};

bloque_declaraciones	::= declaracion
						| bloque_declaraciones declaracion  {: System.out.println("Regla BLOQUE DECLARACION");:}
						;

declaracion ::= tipo_dato DOS_PUNTOS lista_ids  {: System.out.println("Regla DECLARACION");:}
			;

tipo_dato 	::= TIPO_INTEGER {: /*tipoId = T_INTEGER;*/:}  {: System.out.println("Regla TIPO DECLARACION");:}
			| TIPO_FLOAT {:/* tipoId = T_FLOAT;*/:}  {: System.out.println("Regla TIPO DECLARACION");:}
			;

lista_ids	::= ID {: /*agregarVarATabla(&listaSimbolos, yylval.str_val, NULL, tipoId, (int) NULL);*/ System.out.println("Regla LISTA IDS");:}
			| lista_ids PUNTO_COMA ID {: /*agregarVarATabla(&listaSimbolos, yylval.str_val, NULL, tipoId, (int) NULL);*/ System.out.println("Regla LISTA IDS");:}
			;

bloque  ::= sentencia
		    | bloque sentencia {: System.out.println("Regla BLOQUE");:};

sentencia ::= asignacion {: System.out.println("Regla SENTENCIA");:}
			| asignacion_especial {: System.out.println("Regla SENTENCIA");:}
			| bloque_if {: System.out.println("Regla SENTENCIA");:}
			| bloque_while {: System.out.println("Regla SENTENCIA");:}
			| expresion {: System.out.println("Regla SENTENCIA");:}
			| escritura {: System.out.println("Regla SENTENCIA");:}
			| lectura {: System.out.println("Regla SENTENCIA");:}
			;

bloque_if	::= IF P_A expresion_logica P_C LL_A bloque LL_C {: System.out.println("Regla BLOQUE_IF");:}
			| IF P_A expresion_logica P_C LL_A bloque LL_C
				ELSE LL_A bloque LL_C {: System.out.println("Regla BLOQUE IF ELSE");:}
			;

bloque_if_unario	::= IF P_A expresion_logica COMA expresion COMA expresion P_C {: System.out.println("Regla BLOQUE IF UNARIO");:};

bloque_while	::= WHILE P_A expresion_logica P_C LL_A bloque LL_C {: System.out.println("Regla BLOQUE_WHILE");:}
				;

op_booleano 	::= OP_MENOR
				| OP_MENOR_IGUAL
				| OP_MAYOR
				| OP_MAYOR_IGUAL
				| OP_IGUAL   
				| OP_DISTINTO
				;

expresion_logica	::= expresion_logica OP_AND termino_logico {: System.out.println("Regla EXPRESION_LOGICA");:}
					| expresion_logica OP_OR termino_logico {: System.out.println("Regla EXPRESION_LOGICA");:}
					| termino_logico {: System.out.println("Regla EXPRESION_LOGICA");:}
					;

termino_logico	::= OP_NOT termino_logico {: System.out.println("Regla TERMINO LOGICO");:}
				| expresion op_booleano expresion {: System.out.println("Regla TERMINO LOGICO");:}
				;
	

asignacion 	::= ID OP_ASIG expresion {: /*chequearVarEnTabla(&listaSimbolos, $1);*/ System.out.println("Regla ASIGNACION");:}
			;

asignacion_especial ::= ID operadores_especiales expresion  {: /*chequearVarEnTabla(&listaSimbolos, $1); */
															System.out.println("Regla ASIGNACION ESPECIA"); :}
					;
															
operadores_especiales   ::= OP_ASIG_SUM | OP_ASIG_RES | OP_ASIG_MUL | OP_ASIG_DIV
						;

		
expresion	::= termino
			| expresion OP_SUMA termino {: System.out.println("Regla EXPRESION ARITMETICA");:}
			| expresion OP_RESTA termino {: System.out.println("Regla EXPRESION ARITMETICA");:}
			| bloque_if_unario
			;

		
termino	::= termino OP_MUL factor {: System.out.println("Regla TERMINO");:}
		| termino OP_DIV factor  {: System.out.println("Regla TERMINO");:}
		| factor
		;
			
factor	::= P_A expresion P_C {: System.out.println("Regla FACTOR");:}
		;

factor	::= ID {:/* chequearVarEnTabla(&listaSimbolos, $1);*/:}
		| CONST_INT:a {: System.out.println(a); /*agregarVarATabla(&listaSimbolos, NULL, valor, (int) NULL, (int) NULL);*/:}
		| CONST_FLOAT:a {: System.out.println(a);/* agregarVarATabla(&listaSimbolos, NULL, valor, (int) NULL, (int) NULL );*/:}	
		;

escritura	::= DISPLAY ID {: System.out.println("Regla ESCRITURA");:}
			| DISPLAY CONST_STR {: /*lengString = (strlen(yylval.str_val)-2); agregarVarATabla(&listaSimbolos, NULL, yylval.str_val, (int) NULL, lengString); System.out.println("Regla EXPRESION CADENA");*/:}
			;

lectura	::= GET ID {: System.out.println("Regla LECTURA");:}
		;
