/*1ra Area: Código de Usuario*/
//---->Importaciones, paquetes
package Analizadores;
import java_cup.runtime.*;
import java_cup.runtime.Symbol;
import java.util.LinkedList;
import Tabla.*;
import Arbol.*;
import java.util.HashMap;
import java.util.Stack;
import java.util.Map;


// ---------> Codigo para las acciones gramaticales
action code
{:
    Integer cantidadDeOperacionARealizar = 0, identificadorTake = 0;
    public ListaTercetos listaTercetos = new ListaTercetos();
    public TablaDeSimbolos tablaDeSimbolos = new TablaDeSimbolos();
    public TipoDato tipoId;
    String cantOperacionesAsm = null;
    String compararCon0 = null;
    Integer indexLista = 0, indexSentenciaTake = 0, indexInicioTake = 0,
            indexCant = 0, indexSaltoAlFinDelTake = 0, indexFinTake = 0,
            indexDecrementaCant = 0;
    Integer indexFactor= null, indexTermino=null,indexExpresion=null;
    Assembler assembler = new Assembler();
    public String idAAsignarleElTake = null;

:}


parser code
{:

    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        System.out.println("!!!!!!! Error Sintactico !!!!!!! ");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+(fila+1));
        System.out.println("\t\tColumna: "+(columna+1));
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        System.out.println("!!!!!!! Error Sintactico !!!!!!! ");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+(fila+1));
        System.out.println("\t\tColumna: "+(columna+1));
    }

    public void semantic_error(String error){
        System.out.println("!!!!!!! Error Semántico !!!!!!! ");
        System.out.println(error);
        System.exit(1);
    }
:}

/*2da Area: Código de Usuario*/
//----------> declaracion de terminales

terminal String id, cte_s, cte;
terminal Symbol pa, pc, ca, cc,
                pyc, take, mas, coma,
                read, write, asigna;


//----------> declaracion de no terminales
non terminal Symbol S,
                     PROGRAMA, TAKE ,
                     READ, WRITE, LISTA, SENTENCIA, ASIG;



start with S;

S ::= PROGRAMA {:
        listaTercetos.add(new Terceto("ETIQ", "fin_programa"));
        listaTercetos.show();
        assembler.generarAssembler(listaTercetos.getListaTercetos(), tablaDeSimbolos);
                listaTercetos.show();

    :};

PROGRAMA ::= SENTENCIA;

PROGRAMA ::= PROGRAMA SENTENCIA{:System.out.println("cant");:}  ;

SENTENCIA ::= READ | ASIG | WRITE ;

ASIG ::= id:_id {:
                idAAsignarleElTake = tablaDeSimbolos.agregarEnTabla(_id, TipoDato.T_INTEGER, null, null);
                System.out.println("#######"+idAAsignarleElTake);
                RESULT = new Symbol(-1);
        :} asigna TAKE {:
            identificadorTake++;
        :}  ;

READ ::= read id:_id {:
                tablaDeSimbolos.agregarEnTabla(_id, TipoDato.T_INTEGER, null, null);
                listaTercetos.add(new Terceto("READ", _id ));
        :};

TAKE ::= take pa mas pyc id:_idCant {:
                // creamos una variable para controlar la cantidad de operaciones a realizar
                cantOperacionesAsm = "@cantidadDeOperaciones_n" + identificadorTake;
                tablaDeSimbolos.agregarEnTabla(cantOperacionesAsm, TipoDato.T_INTEGER, null, null);

                //inicializamos la cantidad como cant-1 para luego preguntar por cant > 0
                Integer indexCantMenosUno = listaTercetos.add(new Terceto("-" , _idCant,  "1" ));
                listaTercetos.add(new Terceto("=" , cantOperacionesAsm,  indexCantMenosUno ));

                RESULT = new Symbol(-1);

            :} pyc ca LISTA cc pc {:
                 listaTercetos.add(new Terceto("ETIQ", "asignacion_take_n"+identificadorTake ));
            :};

LISTA ::= cte:_intVal {:
                //agregamos en tabla de simbolos
                String constanteCreada = tablaDeSimbolos.agregarEnTabla(Integer.valueOf(_intVal), TipoDato.T_INTEGER, _intVal, null);

                //preguntamos si la cantidad de repeticiones es mayor que 1
                compararCon0 = tablaDeSimbolos.agregarEnTabla(0, TipoDato.T_INTEGER, "0", null);
                listaTercetos.add(new Terceto("CMP" , cantOperacionesAsm,  compararCon0 ));
                listaTercetos.add(new Terceto("JAE", "inicio_take_n"+ identificadorTake));
                String mensajeError = "\"ERROR- Solo puede ingresar una cantidad positiva en la sentencia take.\"";
                String errorNoEnteroPositivo = tablaDeSimbolos.agregarEnTabla("_error_no_positivo", TipoDato.T_STRING, mensajeError, mensajeError.length());
                listaTercetos.add(new Terceto("WRITE", errorNoEnteroPositivo ));
                listaTercetos.add(new Terceto("JMP", "fin_programa"));
                listaTercetos.add(new Terceto("ETIQ", "inicio_take_n"+ identificadorTake));


                //asignamos
                listaTercetos.add(new Terceto("=", idAAsignarleElTake , constanteCreada ));
        :};

LISTA ::= LISTA coma cte:_intVal {:
                //decrementamos la cantidad de operaciones
                indexDecrementaCant = listaTercetos.add(new Terceto("-" , cantOperacionesAsm,  "1" ));
                indexDecrementaCant = listaTercetos.add(new Terceto("=" , cantOperacionesAsm,  indexDecrementaCant ));

                //preguntamos si la cantidad de repeticiones es mayor que 1
                listaTercetos.add(new Terceto("CMP" , cantOperacionesAsm,  compararCon0 ));
                indexSaltoAlFinDelTake = listaTercetos.add(new Terceto("JB", "asignacion_take_n"+ identificadorTake));

                //agregamos en tabla de simbolos
                String constanteCreada = tablaDeSimbolos.agregarEnTabla(Integer.valueOf(_intVal), TipoDato.T_INTEGER, _intVal, null);

                //Realizamos la operación
                indexLista = listaTercetos.add(new Terceto("+", idAAsignarleElTake, constanteCreada ));

                //asignamos
                listaTercetos.add(new Terceto("=", idAAsignarleElTake , indexLista ));
        :};

WRITE ::= write cte_s:_strVal {:
            String nombreLexema = tablaDeSimbolos.agregarEnTabla("", TipoDato.T_STRING, _strVal, _strVal.length()-2);
            listaTercetos.add(new Terceto("WRITE", nombreLexema ));
        :};

WRITE ::= write id:_id {:
            if(!tablaDeSimbolos.chequearEnTabla(_id)){
                semantic_error("La variable " + _id + " no fué definida");
            }
            listaTercetos.add(new Terceto("WRITE", _id ));
        :};
