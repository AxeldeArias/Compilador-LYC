/*1ra Area: Código de Usuario*/
//---->Importaciones, paquetes
package Analizadores;
import java_cup.runtime.*;
import java_cup.runtime.Symbol;
import java.util.LinkedList;
import Tabla.*;
import Arbol.*;
import java.util.*;


// ---------> Codigo para las acciones gramaticales
action code
{:
    Stack<Nodo> pilaExpresionFactor = new Stack<Nodo>();
    Stack<Nodo> pilaMantenerEstadoPorNivel = new Stack<Nodo>();
    Map<Integer, Nodo> listaBloquesPorNivel = new HashMap<Integer, Nodo>();
    Integer indexLista = 0, indexSentenciaTake = 0;
    Integer cantidadDeOperacionRealizadas = 0;
    Integer cantidadDeOperacionARealizar = 0;
    Integer nivel = 0;
    Boolean notActivado = false;
    String operador = null;

    ListaTercetos listaTercetos = new ListaTercetos();
    public TablaDeSimbolos tablaDeSimbolos = new TablaDeSimbolos();
    public Graficador graficador = new Graficador();
    public String primerIDAsignacion = null;
    public TipoDato tipoId;
    public Nodo nodoMult, nodoLista, nodoInicio, nodoPrograma, nodoBloque, nodoSentencia,
               nodoAsignacion, nodoAsignacionEspecial, nodoExpresionLogica, nodoTerminoLogico,
               nodoExpresion, nodoTermino, nodoFactor, nodoTerminoLogicoIzq,
               nodoIf, nodoIfUnario, nodoElse, nodoCuerpoIf,
               nodoWhile,
               nodoDisplay, nodoGet,
               nodoExpresionAsignacion, nodoValorAux, nodoStart;

    Integer indexFactor= null, indexTermino=null,indexExpresion=null;
:}


parser code
{:

    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        System.out.println("!!!!!!! Error Sintactico !!!!!!! ");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+(fila+1));
        System.out.println("\t\tColumna: "+(columna+1));



    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        System.out.println("!!!!!!! Error Sintactico !!!!!!! ");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+(fila+1));
        System.out.println("\t\tColumna: "+(columna+1));


    }
:}

/*2da Area: Código de Usuario*/
//----------> declaracion de terminales

terminal String ID;
terminal String CONST_INT;
terminal String CONST_FLOAT;
terminal Symbol PAR_A,PAR_C,CORCH_A,CORCH_C,PYC,TAKE;


terminal OP_ASIG;
terminal OP_SUMA;
terminal OP_MUL;
                              

//----------> declaracion de no terminales
non terminal Symbol s,
             factor, expresion, termino, lista,sentencia_take , listaIDs,sentencia,asignacion;
non terminal String operador;



start with s;

s   ::= sentencia {:
            listaTercetos.show();
                :};
sentencia ::= asignacion;
sentencia ::= sentencia_take;

asignacion ::= ID:_id OP_ASIG expresion {: listaTercetos.add(new Terceto("=",_id, indexExpresion )); :} ;

sentencia_take ::= TAKE PAR_A operador PYC CONST_INT:_cant {:
                        cantidadDeOperacionARealizar = Integer.valueOf(_cant) ;
                        RESULT = new Symbol(-1);
                 :} PYC CORCH_A listaIDs {:
                     if(cantidadDeOperacionARealizar > 0){
                        System.err.println("ERROR semántico, la lista tiene menos de "+ _cant +" valores");
                        System.exit(1);
                     }
                     RESULT = new Symbol(-1);
                 :}CORCH_C PAR_C {: indexSentenciaTake = indexLista; :};

operador ::= OP_SUMA {: operador = "+"; :};
operador ::= OP_MUL {: operador = "*"; :};

listaIDs ::= listaIDs ID:_id {:
                  if(cantidadDeOperacionARealizar > 0){
                      indexLista = listaTercetos.add(new Terceto(operador, _id , indexLista ));
                      cantidadDeOperacionARealizar--;
                  }
    :};

listaIDs ::= ID:_id {:
                if(cantidadDeOperacionARealizar > 0 ){
                   indexLista = listaTercetos.add(new Terceto(_id)); cantidadDeOperacionRealizadas ++;
                   cantidadDeOperacionARealizar--;
                }

            :};

expresion ::= termino {:indexExpresion = indexTermino;:};
expresion ::= expresion OP_SUMA termino {:indexExpresion = listaTercetos.add(new Terceto("+",indexExpresion, indexTermino));:};

termino ::= factor {:indexTermino = indexFactor;:};
termino ::= termino OP_MUL factor {:indexTermino = listaTercetos.add(new Terceto("*",indexTermino, indexFactor));:};

factor ::= CONST_INT:_intVal {:indexFactor = listaTercetos.add(new Terceto(_intVal));:};
factor ::= sentencia_take  {: indexFactor = indexSentenciaTake; :};

